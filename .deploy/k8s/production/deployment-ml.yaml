apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: ml
  name: ml
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: ml
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert
        kompose.version: 1.30.0 (9d8dcb518)
      creationTimestamp: null
      labels:
        io.kompose.network/k8s-mlflow-subnet: "true"
        io.kompose.service: ml
    spec:
      containers:
        - env:
            - name: AWS_ACCESS_KEY_ID
              value: minio-access-key
            - name: AWS_SECRET_ACCESS_KEY
              value: minio-secret-key
            - name: DB
              value: postgresql://postgres:postgres@pg.default.svc.cluster.local:5432/postgres
            - name: MLFLOW_S3_ENDPOINT_URL
              value: http://s3.default.svc.cluster.local:9000
            - name: S3
              value: s3://ml-artifacts/mlflow
            - name: S3_ENDPOINT_URL
              value: http://s3.default.svc.cluster.local:9000
          image: marcelndeffo/tools:mlflow
          readinessProbe:
            exec:
              command:
                - curl
                - mlflow:5000
            failureThreshold: 3
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                - curl
                - mlflow:5000
            failureThreshold: 3
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 5
          name: ml
          ports:
            - containerPort: 5000
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: "1572864e3"
      hostname: mlflow
      restartPolicy: Always
status: {}
