services:

  .dev:
    hostname: dev
    container_name: dev
    image: marcelndeffo/tesselite:pythondev
    restart: always
    user: tesselite
    command:
      - jupyter
      - lab
      - "--port=8001"
      - "--ip=162.19.0.2"
      - "--NotebookApp.token=tesselite"
      - "--ServerApp.password=''"
      - "--ServerApp.allow_password_change=False"
    volumes:
      - data:/home/tesselite
      - bin:/usr/bin:ro
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: "1500MB"
    logging:
      options:
        max-size: "10m"
        max-file: "50"
    healthcheck:
      test: curl dev:8001 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  .admin:
    extends: .dev
    container_name: admin
    user: root
    command:
      - ttyd
      - "-p"
      - "8002"
      - "-c"
      - "root:tesselite"
      - "-b"
      - "/admin"
      - bash
    healthcheck:
      test: curl admin:8002 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  .base:
    restart: always
    hostname: admin
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "1500MB"
    logging:
      options:
        max-size: "10m"
        max-file: "50"


  .db:
    extends:
      service: .base
    container_name: postgres
    image: postgres:alpine
    environment:
      POSTGRES_PASSWORD: postgres


  .lb:
    hostname: lb
    extends:
      service: .base
    container_name: lb
    image: nginx


  .mlflow:
    extends:
      service: .base
    hostname: mlflow
    image: marcelndeffo/tools:mlflow
    build:
      context: ../..
      dockerfile: .build/mlflow/dockerfile
    healthcheck:
      test: curl mlflow:5000 || exit 1
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: "2000MB"

  .mlflow-nfs:
    extends:
      service: .mlflow
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN

  .mlflow-s3:
    extends:
      service: .mlflow
    environment:
      AWS_ACCESS_KEY_ID: minio-access-key
      AWS_SECRET_ACCESS_KEY: minio-secret-key
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      S3_ENDPOINT_URL: http://minio:9000
      S3: "s3://ml-artifacts/mlflow"
      DB: "postgresql://postgres:postgres@postgres:5432/postgres"

  .monitoring:
    extends:
      service: .base
    container_name: monitoring
    image: gcr.io/cadvisor/cadvisor:v0.36.0
    ports:
      - "3000:8080"
    volumes:
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
      - "/sys:/sys:ro"
      - "/var/run:/var/run:ro"
      - "/:/rootfs:ro"